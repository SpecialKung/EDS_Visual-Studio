/***********************************************************************/
/*                                                                     */
/*  FILE        :typedefine.h                                          */
/*  DATE        :Tue, Dec 05, 2006                                     */
/*  DESCRIPTION :Aliases of Integer Type                               */
/*  CPU TYPE    :SH7147                                                */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.0).     */
/*                                                                     */
/***********************************************************************/
/*
Data type       Size(Byte) Alignment Sign    Minimum         Maximum
-------------------------------------------------------------------------
char            1          1         Used    -128            127
signed char     1          1         Used    -128            127
unsigned char   1          1         Unused  0               255
short           2          2         Used    -32768          32767
unsigned short  2          2         Unused  0               65535
int             4          4         Used    -2^31           (2^31 - 1)
unsigned int    4          4         Unused  0               (2^32 - 1)
long            4          4         Used    -2^31           (2^31 - 1)
unsigned long   4          4         Unused  0               (2^32 - 1)
long long       8          4         Used    -2^63           (2^63 - 1)
unsigned 
     long long  8          4         Unused  0               (2^64 - 1)
*/                  


#pragma bit_order right	// fix bit field order, Sean, 20140910

typedef signed char SBYTE;
typedef unsigned char UBYTE;
typedef signed short SWORD;
typedef unsigned short UWORD;
typedef signed int SILONG;
typedef unsigned int UILONG;
typedef signed long SLONG;
typedef unsigned long ULONG;
typedef signed long long SDOUBLE;
typedef unsigned long long UDOUBLE;

typedef signed char _SBYTE;
typedef unsigned char _UBYTE;
typedef signed short _SWORD;
typedef unsigned short _UWORD;
typedef signed int _SINT;
typedef unsigned int _UINT;
typedef signed long _SDWORD;
typedef unsigned long _UDWORD;
typedef signed long long _SQWORD;
typedef unsigned long long _UQWORD;

typedef struct{
    UBYTE x[21];
}string20;

typedef union{
          struct{
            UBYTE low;
            SBYTE hi;           
          }sb;
        SWORD sw;
}SWORD_UNION;

typedef union{
          struct{
            UWORD low;
            SWORD hi;
          }sw;
        SLONG sl;
}SLONG_UNION;

typedef union{
	struct{
	  ULONG b0:1;           
	  ULONG b1:1;          
	  ULONG b2:1;           
	  ULONG b3:1;           
	  ULONG b4:1;          
	  ULONG b5:1;           
	  ULONG b6:1;
	  ULONG b7:1;
	  ULONG b8:1;           
	  ULONG b9:1;          
	  ULONG b10:1;           
	  ULONG b11:1;           
	  ULONG b12:1;          
	  ULONG b13:1;           
	  ULONG b14:1;
	  ULONG b15:1;        	
	  ULONG b16:1;           
	  ULONG b17:1;          
	  ULONG b18:1;           
	  ULONG b19:1;           
	  ULONG b20:1;          
	  ULONG b21:1;           
	  ULONG b22:1;
	  ULONG b23:1;
	  ULONG b24:1;           
	  ULONG b25:1;          
	  ULONG b26:1;           
	  ULONG b27:1;           
	  ULONG b28:1;          
	  ULONG b29:1;           
	  ULONG b30:1;
	  ULONG b31:1;
	}bit;     	
	struct{
	UBYTE b0;	
	UBYTE b1;
	UBYTE b2;
	UBYTE b3;
	}ub;
    struct{
    UWORD low;
	UWORD hi;
    }uw;
    ULONG ul;
}ULONG_UNION;

typedef union{
        struct{
          UBYTE b0:1;           
          UBYTE b1:1;          
          UBYTE b2:1;           
          UBYTE b3:1;           
          UBYTE b4:1;          
          UBYTE b5:1;           
          UBYTE b6:1;
          UBYTE b7:1;
        }bit;
        UBYTE ub;
}UBYTE_UNION;

typedef union{
        struct{
          UWORD b0:1;           
          UWORD b1:1;          
          UWORD b2:1;           
          UWORD b3:1;           
          UWORD b4:1;          
          UWORD b5:1;           
          UWORD b6:1;
          UWORD b7:1;
          UWORD b8:1;           
          UWORD b9:1;          
          UWORD b10:1;           
          UWORD b11:1;           
          UWORD b12:1;          
          UWORD b13:1;           
          UWORD b14:1;
          UWORD b15:1;
        }bit;
        struct{
            UBYTE low;
            UBYTE hi;
        }ub;
        UWORD uw;
}UWORD_UNION;

typedef union{
        struct{
          UDOUBLE b0:1;           
          UDOUBLE b1:1;          
          UDOUBLE b2:1;           
          UDOUBLE b3:1;           
          UDOUBLE b4:1;          
          UDOUBLE b5:1;           
          UDOUBLE b6:1;
          UDOUBLE b7:1;
          UDOUBLE b8:1;           
          UDOUBLE b9:1;          
          UDOUBLE b10:1;           
          UDOUBLE b11:1;           
          UDOUBLE b12:1;          
          UDOUBLE b13:1;           
          UDOUBLE b14:1;
          UDOUBLE b15:1;        	
          UDOUBLE b16:1;           
          UDOUBLE b17:1;          
          UDOUBLE b18:1;           
          UDOUBLE b19:1;           
          UDOUBLE b20:1;          
          UDOUBLE b21:1;           
          UDOUBLE b22:1;
          UDOUBLE b23:1;
          UDOUBLE b24:1;           
          UDOUBLE b25:1;          
          UDOUBLE b26:1;           
          UDOUBLE b27:1;           
          UDOUBLE b28:1;          
          UDOUBLE b29:1;           
          UDOUBLE b30:1;
          UDOUBLE b31:1;        	
          UDOUBLE b32:1;           
          UDOUBLE b33:1;          
          UDOUBLE b34:1;           
          UDOUBLE b35:1;           
          UDOUBLE b36:1;          
          UDOUBLE b37:1;           
          UDOUBLE b38:1;
          UDOUBLE b39:1;
          UDOUBLE b40:1;           
          UDOUBLE b41:1;          
          UDOUBLE b42:1;           
          UDOUBLE b43:1;           
          UDOUBLE b44:1;          
          UDOUBLE b45:1;           
          UDOUBLE b46:1;
          UDOUBLE b47:1;        	
          UDOUBLE b48:1;           
          UDOUBLE b49:1;          
          UDOUBLE b50:1;           
          UDOUBLE b51:1;           
          UDOUBLE b52:1;          
          UDOUBLE b53:1;           
          UDOUBLE b54:1;
          UDOUBLE b55:1;
          UDOUBLE b56:1;           
          UDOUBLE b57:1;          
          UDOUBLE b58:1;           
          UDOUBLE b59:1;           
          UDOUBLE b60:1;          
          UDOUBLE b61:1;           
          UDOUBLE b62:1;
          UDOUBLE b63:1;
        }bit;        
        struct{
            UBYTE b0;
            UBYTE b1;
            UBYTE b2;
            UBYTE b3;
            UBYTE b4;
			UBYTE b5;
			UBYTE b6;                                    
            UBYTE b7;
        }ub;        
        struct{
            UWORD w0;
            UWORD w1;
            UWORD w2;
            UWORD w3;
        }uw;
        UDOUBLE ud;
}UDOUBLE_UNION;

typedef struct{              // Line Equation: y= slope*x + yBias      
        SWORD yBias;         // Bias
        UWORD ksF;           // fraction of slope
        UWORD ksI;           // Integer of slope
}CalLine;

typedef struct{
        UWORD V2;
        UWORD F2;
        UWORD V1;
        UWORD F1;        
}VFTableStruct;

typedef struct {
/*
  UWORD def ;  
  UWORD max ;  
  UWORD min ;  
  UWORD ati ;  */
  UWORD ati ;
  UWORD min ;
  UWORD max ;
  UWORD def ;

} PARAM_ATTR;


typedef struct {

  UWORD ati ;

} DP_PARAM_ATTR;

typedef union  
{
	
	ULONG dword;	
	struct
	{	
	   UWORD LWord;
	   UWORD HWord;
		 	
	}word;
	struct
	{		 
		UBYTE_UNION Byte0;
		UBYTE_UNION Byte1;
		UBYTE_UNION Byte2;
		UBYTE_UNION Byte3;	 
	}byte;
	

}dDWORD;

typedef struct {
    dDWORD canBuffL;
	dDWORD canBuffH;
}CANMsg;

	/* TYPE DEFINE FOR FLUX WEAKNESS */	
	/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
	  ENUMS
	\*--------------------------------------------------------------------------------------------------------------------------------------------------*/
		typedef enum tagCpx_Vect_Section {
			LIMIT_SECTION1 = 1, 
			LIMIT_SECTION2 = 2, 
			LIMIT_SECTION3 = 3 
		} mCPX_VOLT_REGU_SECTION; /* Description: Complex voltag vector regulation section enumeration. */
		
		typedef enum tagInertia_Est {
			INERTIA_INIT_SET = 1, 
			INERTIA_INIT_ACC = 2, 
			INERTIA_GET_TORQ = 3, 
			INERTIA_SECOND_ACC = 4, 
			INERTIA_EST_END = 5, 
			INERTIA_EST_FAIL = 6 
		} mINERTIA_EST; /* Description: Inertia estimation step enumeration */
		
		/* FILTER_H */
		typedef enum tagVf_Curve {
			POLYLINE_TRIPLE = 0, 
			LINEAR_1P5TH = 1, 
			LINEAR_2ND = 2, 
			LINEAR_1ST = 3, 
			POLYLINE_BOOSTED = 4 
		} mVF_CURVE; /* Description: VF table curve type. */
	typedef unsigned char Bool; /* Description: boolean basetype */
	typedef float Float32; /* Description: 32 bit floating-point basetype */
	typedef double Float64; /* Description: 64 bit floating-point basetype */
	//typedef signed short int SWORD; /* Description: 16 bit signed integer basetype */
	//typedef signed long int SLONG; /* Description: 32 bit signed integer basetype */
	//typedef signed char SBYTE; /* Description: 8 bit signed integer basetype */
	//typedef unsigned short int UWORD; /* Description: 16 bit unsigned integer basetype */
	//typedef unsigned long int ULONG; /* Description: 32 bit unsigned integer basetype */
	//typedef unsigned char UBYTE; /* Description: 8 bit unsigned integer basetype */

	typedef struct tagPi_Ctrler_Coef {
		Float32 flPropGain; /* Description: Kp */
		Float32 flDiscreteIntegGain; /* Description: Ki * Ts */
	} tPI_CTRLER_COEF; /* Description: Coefficient structure of classical PI-type controller. */
	
	typedef struct tagPi_Ctrler_In {
		Bool blStopIntegFlag; /* Description: Stop integration flag. 0: OFF; 1: ON. */
		Float32 flBackCalValue; /* Description: Back-calculation value = BackCalGain * (SaturationOut - ControllerOut). Give this value zero if integral-c
		lamp is used. */
		Float32 flCtrlerErr; /* Description: Error = Command - Feedback. */
	} tPI_CTRLER_IN; /* Description: Input structure of classical PI-type controller. */
	
	typedef struct tagPi_Ctrler_Out {
		Float32 flPiCtrlOut; /* Description: Controller output. */
		Float32 flIntegStateOut; /* Description: Output of integration-state term. */
	} tPI_CTRLER_OUT; /* Description: Output structure of classical PI-type controller. */

	typedef struct tagtREUSE_LPF {
    Float32 flStateOut;
} tREUSE_LPF; /* Description: Reuse structure */

	typedef struct tagSat_Out {
    UBYTE ubSatFlag; /* Description: 0: OFF; 1: Over UpLim; 2: Below LowLim. */
    Float32 flSatOut; /* Description: Output of saturation. */
} tSAT_OUT;

	
	typedef struct tagtREUSE_ASMAMR {
		Bool blAsmAmrStopIntegFlagState;
		Float32 flAsmAmrCtrlerIntegState;
		tREUSE_LPF * ptREUSE_LPF;
	} tREUSE_ASMAMR; /* Description: Reuse structure */
	
	typedef struct tagtREUSE_ASMFLUXWKN {
		Float32 flStatorElectSpdLpfState;
	} tREUSE_ASMFLUXWKN; /* Description: Reuse structure */
	
	typedef struct tagtREUSE_ASMIDREF {
		tREUSE_ASMAMR * ptREUSE_ASMAMR;
		tREUSE_ASMFLUXWKN * ptREUSE_ASMFLUXWKN;
	} tREUSE_ASMIDREF; /* Description: Reuse structure */
	
	typedef struct tagAsm_Amr_Coef {
		Float32 flMotorNoLoadCurAmp; /* Description: Motor no-load current. Unit: Amp(peak) */
	} tASM_AMR_COEF; /* Description: Structure of coefficients of induction motor AMR function. */
	
	typedef struct tagAsm_Amr_In {
		Float32 flIntTimeTsec; /* Description: Interrupt time of this function. Unit: sec */
		Float32 flOutVoltLimVt; /* Description: Voltage output limit by bus voltage.. Unit: Volt. */
		Float32 flOutVoltMagVt; /* Description: Inverter voltage output. unit: Volt. */
	} tASM_AMR_IN; /* Description: Structure of inputs of induction motor AMR function. */
	
	typedef struct tagAsm_Amr_Pr {
		Float32 flPrAsmAmrPropGain; /* Description: AMR proportional gain of asynchronous motor, that is, Kp. */
		Float32 flPrAsmAmrIntegGain; /* Description: AMR integral gain of asynchronous motor, that is, Ki = 1/Ti. */
		Float32 flPrAsmAmrLpfTimeConstTsec; /* Description: LPF time constant of AMR (= tau = 1/cutOffFreqRd). unit: sec. */
	} tASM_AMR_PR; /* Description: Structure of PR of induction motor AMR function. */
	
	typedef struct tagAsm_Daxis_Cur_Ref_Coef {
		Float32 flInvtCurLimAmp; /* Description: Asynchronous motor current limit circle. which is desided by inverter limit current. Unit: Magnitude, Amp
		. */
		Float32 flMotorNoLoadCurAmp; /* Description: Motor no-load current. Unit: Amp(peak) */
		Float32 flMotorPolePairs; /* Description: The number of motor stator pole pair. */
		Float32 flMotorMutualInductLh; /* Description: Mutual inductance of inverse gamma model. Unit: H. */
		Float32 flMotorSigmaInductLh; /* Description: Sigma inductance of inverse gamma model. Unit: H. */
		Float32 flMotorStatorResistOhm; /* Description: Stator resistance. Unit: Ohm. */
	} tASM_DAXIS_CUR_REF_COEF; /* Description: Structure of coefficients of induction motor d-axis syn. frame current reference function. */
	
	typedef struct tagAsm_Daxis_Cur_Ref_In {
		Float32 flIntTimeTsec; /* Description: Interrupt time of this function. Unit: sec */
		Float32 flStatorElectSpdRdps; /* Description: Stator electrical speed. Unit: Radius / sec. */
		Float32 flOutVoltLimVt; /* Description: Voltage output limit by bus voltage.. Unit: Volt. */
		Float32 flOutVoltMagVt; /* Description: Inverter voltage output. unit: Volt. */
	} tASM_DAXIS_CUR_REF_IN; /* Description: Structure of inputs of induction motor d-axis syn. frame current reference function. */
	
	typedef struct tagAsm_Daxis_Cur_Ref_Out {
		Float32 flFluxWknMotorTorqConst; /* Description: Motor torque constant = 3/2 * Polepairs * LM *  ids. Unit: Nm / Amp. */
		Float32 flFluxWknCurRefAmp; /* Description: D-axis synchronous frame current reference. Unit: Amp */
		Float32 flFluxWknCurRefLimAmp; /* Description: The limit of q-axis synchronous frame current reference. Unit: Amp. */
	} tASM_DAXIS_CUR_REF_OUT; /* Description: Structure of outputs of induction motor d-axis syn. frame current reference function. */
	
	typedef struct tagAsm_Daxis_Cur_Ref_Pr {
		Float32 flPrAsmAmrPropGain; /* Description: AMR proportional gain of asynchronous motor, that is, Kp. */
		Float32 flPrAsmAmrIntegGain; /* Description: AMR integral gain of asynchronous motor, that is, Ki = 1/Ti. */
		Float32 flPrAsmAmrLpfTimeConstTsec; /* Description: LPF time constant of AMR (= tau = 1/cutOffFreqRd). unit: sec. */
	} tASM_DAXIS_CUR_REF_PR; /* Description: Structure of PR of induction motor d-axis syn. frame current reference function. */
	
	typedef struct tagAsm_Flux_Wkn_Coef {
		Float32 flInvtCurLimAmp; /* Description: Asynchronous motor current limit circle. which is desided by inverter limit current. Unit: Magnitude, Amp
		. */
		Float32 flMotorNoLoadCurAmp; /* Description: Motor no-load current. Unit: Amp(peak) */
		Float32 flMotorMutualInductLh; /* Description: Mutual inductance of inverse gamma model. Unit: H. */
		Float32 flMotorSigmaInductLh; /* Description: Sigma inductance of inverse gamma model. Unit: H. */
		Float32 flMotorStatorResistOhm; /* Description: Stator resistance. Unit: Ohm. */
	} tASM_FLUX_WKN_COEF; /* Description: Structure of coefficients of induction motor field-weakening function. */
	
	typedef struct tagAsm_Flux_Wkn_In {
		Float32 flIntTimeTsec; /* Description: Interrupt time of this function. Unit: sec */
		Float32 flStatorElectSpdRdps; /* Description: Stator electrical speed. Unit: Radius / sec. */
		Float32 flOutVoltLimVt; /* Description: Voltage output limit by bus voltage.. Unit: Volt. */
	} tASM_FLUX_WKN_IN; /* Description: Structure of inputs of induction motor field-weakening function. */

